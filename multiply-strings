//
// Created by mayfly on 2019/2/1.
//

#include <iostream>
#include <string>

using namespace std;
string str_add(string num1, string num2);
string str_mul(string num, int m);
string multiply(string num1, string num2);

int main(){
    cout<<multiply("123456789","987654321")<<endl;
    return 0;
}
string str_add(string num1, string num2){
    string result="";
    int len1=num1.length();
    int len2=num2.length();
    if(num1=="0"){
        result=num2;
    }else if(num2=="0"){
        result=num1;
    }else{//拿长字符串当底进行运算
        int t_f=0;
        int rem;
        if(len1>len2){
            for (int i = 0; i < len2; ++i) {
                rem = num1[len1-1-i]-'0'+num2[len2-1-i]-'0'+t_f;
                t_f = rem/10;
                rem=rem%10;
                num1[len1-1-i]=(char)('0'+rem);
            }
            //处理额外进位
            int tindex=len1-len2-1;
            while(t_f>0 && tindex>=0){
                rem = num1[tindex]-'0'+t_f;
                t_f = rem/10;
                rem=rem%10;
                num1[tindex]=(char)('0'+rem);
                tindex--;
            }
            result = num1;
            if(t_f>0)//到最前一位仍有进位
                result=((char)('0'+t_f))+result;
        }else{
            for (int i = 0; i < len1; ++i) {
                rem = num1[len1-1-i]-'0'+num2[len2-1-i]-'0'+t_f;
                t_f = rem/10;
                rem=rem%10;
                num2[len2-1-i]=(char)('0'+rem);
            }
            //处理额外进位
            int tindex=len2-len1-1;
            while(t_f>0 && tindex>=0){
                rem = num2[tindex]-'0'+t_f;
                t_f = rem/10;
                rem=rem%10;
                num2[tindex]=(char)('0'+rem);
                tindex--;
            }
            result=num2;
            if(t_f>0)//到最前一位仍有进位
                result=((char)('0'+t_f))+result;
        }

    }
    return result;
}
string str_mul(string num, int m){//m>=0 and m<=10
    string result="";
    if(m==0){
        result="0";
    }else if(m==1){
        result=num;
    }else if(m==10){
        result=num;
        result+="0";
    }else{
        int t_f=0;
        int num_len=num.length();
        int rem;
        for (int i = 0; i < num_len; ++i) {//逐位相乘
            rem=num[num_len-1-i]-'0';//获取一位
            rem=rem*m+t_f;//相乘并加上进位
            if(rem<10){//此时不产生进位
                t_f=0;
            }else{//产生进位
                t_f = rem/10;
                rem=rem%10;
            }
            num[num_len-1-i]=(char)('0'+rem);
        }
        if(t_f==0){//没有进位则已经求得结果
            result=num;
        }else{//处理最终进位
            result="";
            result+=((char)('0'+t_f));
            result+=num;
        }
    }
    return result;
}
string multiply(string num1, string num2) {
    string result;
    if(num1=="0" || num2=="0"){
        result="0";
    }else{
        string tresult;
        result="0";
        int len2;
        len2=num2.length();
        for (int i = 0; i < len2; ++i) {
            tresult = str_mul(num1, num2[len2-1-i]-'0');
            for (int j = 0; j < i; ++j) {
                tresult = tresult+"0";
            }
            result = str_add(tresult, result);
        }
    }
    return result;
}
